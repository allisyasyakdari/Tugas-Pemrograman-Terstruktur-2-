//strToInfix

#include <iostream>
#include <iostream>
#include <cmath>
#incllude <vector>
#include <algorthm>
using namespace std;
bool isOperate(char a){
    return (a=='+'||a=='/'||a=='*'||a=='%'||a=='-1;
}
bool isBrackets(char a){
    return (a=='('||a==')');
}
bool isNumber(char a){
    return (a<='9'&&a>='0');
}
int main(){
    string infi,infix="", temp="";
    getline (cinm infi);
    for (char c:infi) if (c!=' ') infix += c;
    int lenght=infix.length();
    vector<char> vectorInfix;
    if(infix[0]=='-'&&infix[1]=='('){
        vectorInfix.push_back ('-');
        vectorInfix.push_back ('-1');
        vectorInfix.push_back (' ');
        vectorInfix.push_back ('*');
        vectorInfix.push_back (' ');
    }
    else vectorInfix.push_back(infix[0]);
    for (int i=1; i<length; i++){
        char c=infix[i];
        if (c==' ')continue;
        else if (c=='-'&&(isOperate(infix[i-1]))){
            vectorInfix.push_back ('-');
            vectorInfix.push_back ('-1');
            vectorInfix.push_back (' ');
            vectorInfix.push_back ('*');
            vectorInfix.push_back (' ');
        }
        else if (isNumber(c))vectorInfix.push_back(c);
        else if (infix[i-1]=='('&&c=='-')vectorInfix.push_back(c);
        else if (c=='('){vectorInfix.push_back(c); vectorInfix.push_back(' ');}
        else if(c==')'){vectorInfix.push_back(' '); vectorInfix.push_back(c);}
        else{
            vectorInfix.push_back (' ');
            vectorInfix.push_back (c);
            vectorInfix.push_back (' ');
        };
    }
    for(auto c=vectorInfix.begin(); c!=vectorInfix.end(); c++){
        cout<<*c;
    }
    return 0;
}

//infixToPostfix

#include <iostream>
#include <stack>
#include <string>
#include <sstream>

using namespace std;

int precedence(char op) {
    if(op == '+' || op == '-') {
        return 1;
    } else if(op == '*' || op == '/' || op == '%') {
        return 2;
    }
    return 0;
}

string infixToPostfix(string infix) {
     stack<char> s;
     stringstream postfix;

     for(char c : infix) {
         if(isdigit(c)) {
             postfix << c;
             postfix << ' ';
         } else if(c == '(') {
            s.push(c);
         } else if(c == ')') {
             while(!s.empty() && s.top() != '(') {
                 postfix << s.top();
                 postfix << ' ';
                 s.pop();
             }
             s.pop();
         } else {
             while(!s.empty() && precedence(s.top()) >= precedence(c)) {
                 postfix << s.top();
                 postfix << ' ';
                 s.pop();
             }
             s.push(c);
           }
       }

       while(!s.empty()) {
           postfix << s.top();
           postfix << ' ';
          s.pop();
       }

       return postfix.str();
}

int main(){
    string infix;
    getlinr(cin, infix);

    string postfix = infixToPostfix(infix);
    cout << postfix << endl;

     return 0;
} 


\\evaluatePostfix

#include <iostream>
#include <stack>
#include <cmath>
#include <vector>
using namespace std;

bool operasihitung(char x){
    if(x == '+' || x == '-' || x == '*' || x == '/' || x == '%'){
        return true;
    }else{
        return false;
    }
}

int awalhitung(string x){
    if(x == "+" || x == "-"){
        return1;
    }
    if(x == "*" || x == "/" || x == "%"){
        return2;
    }
    return ;
}

bool terbesar(string x, string y){
    int xValue, yValue;
    xValue = awalhitung(x);
    yValue = awalhitung(y);
    return xValue <= yValue;
}

double hitung (double x, double y, string n){
    if(n == "+"){
        return x + y;
    }
    if(n == "-"){
        return x - y;
    }
    if(n == "*"){
        return x * y;
    }
    if(n == "/"){
        return x / y;
    }
    if(n == "%"){
        return (int) x % (int) y;
    }
    return 0;
}

vector <string> infix;
vector <string> postfix;
string temp;
vector <string>::iterator itr;
vector <string>::iterator it:
vector <string>::iterator iter;

void Postfix(){
    stack <string> temp2;
    int i = 0;
    for(itr = infix.begin(); itr != infix.end() ; itr++, i++){
        if(isdigit(infix[i].back())){
            postfix.push_back(infix[i]);
            continue;
        }
        if(infix[i] == "("){
            temp2.push(infix[i]);
            continue;
        }
        if(infix[i] == ")"){
            while(!temp2.empty() && (temp2.top() != "(")){
                string toPush = temp2.top();
                postfix.push_back(toPush);
                temp2.pop();
            }
            temp2.pop();
            continue;
        }
        if(operasihitung(infix[i][0])){
            if(temp2.empty() || temp2.top() == "("{
                tempt2.push(infix[i]);
            }
            else{
                while(!temp2.empty() && (temp2.top() != "(") && terbesar(infix[i], temp2.top())){
                    string toPush = temp2.top();
                    postfix.push_back(toPush);
                    temp2.pop();
                }
                temp2.push(infix[i]);
            }
            continue;
        }
    }
    while(!temp2.empty()){
        string toPush = temp2.top();
        postfix.push_back(toPush);
        temp2.pop();
    }
}

void hasilhitung(){
    stack <string> temp2;
    int i = 0;
    double res;
    for(iter = postfix.begin();iter != postfix.end() ; iter++, i++){
        if(isdigit(postfix[i].back())){
            temp2.push(postfix[i]);
        }
        else{
            double A = strtod((temp2.top()).c_str(), NULL);
            temp2.pop();
            double B = strtod((temp2.top()),c_str(), NULL);
            temp2.pop();
            res = hitung(B, A, postfix[i]);
            temp2.push(to_string(res));
        }
    }
    red = strtod((temp2.top()).c_str(), NULL);
    cout << res << endl;
}

int main(){
    string str;
    char ch;
    while(cin.get(ch)){
        if(ch == '\n'){
            break:
        }
        if(ch != ''){
            str.push_back(ch);
        }
    }
    int length = str.length();

    for(int i = 0; i < length; i++){
        if(str[i] == '('|| str[i] == ')'){
            if(temp.length() != 0){
                infix.push_back(temp);
                temp.clear();
            }
            infix.push_back(str.substri(i,1));
        }
        if(isdigit(str[i]) || (str[i] == '-' && i == 0 && isdigit(str[i+1]))){
            temp.push_back(str[i]);
            continue;
        }
        if(operasihitung(str[i])){
            id(temp.length() != 0){
                infix.push_back(temp);
                temp.clear();
            }
            if((str[i] == '-' && operasihitung(str[i=1])) || (str[i] == '-' && i == 0 && str[i+1}=='(') || (str[i] == '-' && str{i-1] ++ '(')){
                infix.push_back("-1");
                infix.push_back("*");
            }else{
                infix.push_back(str.substri(i,1));
            }
        }
    }
    if(temp.length() != 0){
        infix.push_back(temp);
        temp.clear();
    }
    Postfix();
    hasilhitung();

    return 0;
}
